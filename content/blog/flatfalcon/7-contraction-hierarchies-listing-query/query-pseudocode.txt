# Input: Directed graph G_up = (V, E_up), source node s
#        Downward labels: down_labels[v] = {listing: time_to_listing}
# Output: result[listing] = shortest time from s via some v ∈ V to listing


for v in V:
    d[v] = ∞
d[s] = 0

result = {}  # listing → shortest time via any visited node

queue = PriorityQueue()
queue.insert(s, priority=0)

while not queue.is_empty():
    v = queue.extract_min()

    for (listing, t_v_l) in down_labels[v]:
        time_via_v = d[v] + t_v_l
        if listing not in result or time_via_v < result[listing]:
            result[listing] = time_via_v

    for (v, w) in E_up:
        if d[v] + t(v, w) < d[w]:
            d[w] = d[v] + t(v, w)
            queue.insert(w, priority=d[w])
