# Input: Graph G = (V, E), start node s, maximum travel time b
# Output: Distance map d[v] for all reachable v ∈ V within time b

for v in V:
    d[v] = ∞
d[s] = 0

buckets = [empty list for distance = 0 to b]
buckets[0].append(s)

for distance in 0 to b:
    while buckets[distance] is not empty:
        v = buckets[distance].pop()

        # skip if already visited with a shorter distance
        if d[v] < distance:
            continue

        # update distance if shorter
        d[v] = distance

        # explore neighbors
        for (u, v) in incoming_edges(E, v):
            new_distance = w(u, v) + d[v]
            if new_distance ≤ b:
                buckets[new_distance].append(u)
